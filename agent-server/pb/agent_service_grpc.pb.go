// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pb/agent_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentActionClient is the client API for AgentAction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentActionClient interface {
	UpdateServiceFile(ctx context.Context, in *AgentServiceRequest, opts ...grpc.CallOption) (*AgentResponse, error)
	UploadFile(ctx context.Context, in *AgentFileRequest, opts ...grpc.CallOption) (*AgentResponse, error)
}

type agentActionClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentActionClient(cc grpc.ClientConnInterface) AgentActionClient {
	return &agentActionClient{cc}
}

func (c *agentActionClient) UpdateServiceFile(ctx context.Context, in *AgentServiceRequest, opts ...grpc.CallOption) (*AgentResponse, error) {
	out := new(AgentResponse)
	err := c.cc.Invoke(ctx, "/pb.AgentAction/UpdateServiceFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentActionClient) UploadFile(ctx context.Context, in *AgentFileRequest, opts ...grpc.CallOption) (*AgentResponse, error) {
	out := new(AgentResponse)
	err := c.cc.Invoke(ctx, "/pb.AgentAction/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentActionServer is the server API for AgentAction service.
// All implementations must embed UnimplementedAgentActionServer
// for forward compatibility
type AgentActionServer interface {
	UpdateServiceFile(context.Context, *AgentServiceRequest) (*AgentResponse, error)
	UploadFile(context.Context, *AgentFileRequest) (*AgentResponse, error)
	mustEmbedUnimplementedAgentActionServer()
}

// UnimplementedAgentActionServer must be embedded to have forward compatible implementations.
type UnimplementedAgentActionServer struct {
}

func (UnimplementedAgentActionServer) UpdateServiceFile(context.Context, *AgentServiceRequest) (*AgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceFile not implemented")
}
func (UnimplementedAgentActionServer) UploadFile(context.Context, *AgentFileRequest) (*AgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedAgentActionServer) mustEmbedUnimplementedAgentActionServer() {}

// UnsafeAgentActionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentActionServer will
// result in compilation errors.
type UnsafeAgentActionServer interface {
	mustEmbedUnimplementedAgentActionServer()
}

func RegisterAgentActionServer(s grpc.ServiceRegistrar, srv AgentActionServer) {
	s.RegisterService(&AgentAction_ServiceDesc, srv)
}

func _AgentAction_UpdateServiceFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentActionServer).UpdateServiceFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AgentAction/UpdateServiceFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentActionServer).UpdateServiceFile(ctx, req.(*AgentServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAction_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentActionServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AgentAction/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentActionServer).UploadFile(ctx, req.(*AgentFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentAction_ServiceDesc is the grpc.ServiceDesc for AgentAction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentAction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AgentAction",
	HandlerType: (*AgentActionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateServiceFile",
			Handler:    _AgentAction_UpdateServiceFile_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _AgentAction_UploadFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/agent_service.proto",
}
